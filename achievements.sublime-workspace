{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"on",
				"onAddSource\tproperty"
			],
			[
				"IWOrk",
				"IWorkflowState\tinterface"
			],
			[
				"IWor",
				"IWorkflowDiagramState\tinterface"
			],
			[
				"Diag",
				"DiagramWidget\talias"
			],
			[
				"IWO",
				"IWorkflowDiagramState\tinterface"
			],
			[
				"allo",
				"allowCanvasTranslation\tJSX attribute"
			],
			[
				"clas",
				"className\tJSX attribute"
			],
			[
				"reqP",
				"reqPattern\tconst"
			],
			[
				"feat",
				"featureId\tparameter"
			],
			[
				"en",
				"eManager\tconst"
			],
			[
				"ReqP",
				"ReqPatternData\talias"
			],
			[
				"m",
				"addMenuEl\tproperty"
			],
			[
				"ReqPatt",
				"ReqPatternType\talias"
			],
			[
				"dat",
				"datetime\tenum member"
			],
			[
				"ReqPat",
				"ReqPatternData\talias"
			],
			[
				"getRe",
				"getReqPatternRelations\tmethod"
			],
			[
				"IDocPa",
				"IDocPatternStructureData\tinterface"
			],
			[
				"IDocP",
				"IDocPatternData\tinterface"
			],
			[
				"get",
				"get\tmethod"
			],
			[
				"compo",
				"componentDidUpdate\tmethod"
			],
			[
				"onSele",
				"onSelectDimension\tproperty"
			],
			[
				"dime",
				"complexDimension\tproperty"
			],
			[
				"componend",
				"componentDidMount\tmethod"
			],
			[
				"ICompl",
				"IComplexDimensionProps\tinterface"
			],
			[
				"ICOmpl",
				"IComplexDimensionProps\tinterface"
			],
			[
				"ICom",
				"IComplexDimensionState\tinterface"
			],
			[
				"defaua",
				"defaultExpanded\tJSX attribute"
			],
			[
				"f",
				"selectedFeatureId\tproperty"
			],
			[
				"Feat",
				"featuresInfo\talias"
			],
			[
				"selecte",
				"selectedFeatureId\tconst"
			],
			[
				"sele",
				"selectedMeasure\tproperty"
			],
			[
				"pro",
				"processMeasures\tproperty"
			],
			[
				"pr",
				"processMeasures\tproperty"
			],
			[
				"selected",
				"selectedMeasureId\tproperty"
			],
			[
				"IDI",
				"IDimensionState\tinterface"
			],
			[
				"CU",
				"CustomTree\talias"
			],
			[
				"customT",
				"CustomTreeRow\talias"
			],
			[
				"Cust",
				"CustomTree\talias"
			],
			[
				"ICu",
				"ICustomTreeRowState\tinterface"
			],
			[
				"Ex",
				"ExpandMoreIcon\talias"
			],
			[
				"IEnS",
				"IEntitySelectDialogState\tinterface"
			],
			[
				"enum",
				"enumeration\tconst"
			],
			[
				"comp",
				"componentDidUpdate\tmethod"
			],
			[
				"getR",
				"getRelationsStructure\tmethod"
			],
			[
				"IRelat",
				"IRelationsData\tinterface"
			],
			[
				"in",
				"insertMany\tmethod"
			],
			[
				"up",
				"updateOne\tmethod"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/containers/Activity/Activity.js",
			"settings":
			{
				"buffer_size": 7807,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/components/activityViews/ActivityQuestion.js",
			"settings":
			{
				"buffer_size": 1030,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/services/paths.js",
			"settings":
			{
				"buffer_size": 31320,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/containers/Cohort/selectors.js",
			"settings":
			{
				"buffer_size": 1445,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/containers/Cohort/sagas.js",
			"settings":
			{
				"buffer_size": 3391,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/services/cohorts.js",
			"settings":
			{
				"buffer_size": 9287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 927 files for \"selectCohort\" (regex)\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/COURSE_MEMBERS_FETCH_SUCCESS.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/PROBLEM_SOLUTION_PROVIDED_SUCCESS.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/PROBLEM_SOLUTION_REFRESH_REQUEST.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/PROBLEM_SOLUTION_REFRESH_SUCCESS.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/PROBLEM_SOLUTION_SUBMIT_REQUEST.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/functions/data/PROBLEM_SOLVE_UPDATE.json:\n    File too large, skipping\n\n/home/brainenjii/Develop/node/nus/achievements/src/containers/Cohort/selectors.js:\n   25  };\n   26  \n   27: export const selectCohort = (state, ownProps) => {\n   28    const cohortId = ownProps.match.params.cohortId;\n   29    const cohort = state.firebase.data.cohort;\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 1204,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/containers/Cohort/reducer.js",
			"settings":
			{
				"buffer_size": 2041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/components/tables/CohortCoursesTable.js",
			"settings":
			{
				"buffer_size": 6652,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/containers/Assignments/selectors.js",
			"settings":
			{
				"buffer_size": 16800,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* eslint-disable max-len */\n/**\n * @file PathDialog container module\n * @author Theodor Shaytanov <theodor.shaytanov@gmail.com>\n * @created 01.03.18\n */\n\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { firebaseConnect } from \"react-redux-firebase\";\nimport { compose } from \"redux\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloudDownload from \"@material-ui/icons/CloudDownload\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { GameActivity, TournamentActivity } from \"../AddActivitiesForm/\";\n\nimport { ACTIVITY_TYPES, YOUTUBE_QUESTIONS } from \"../services/\";\nimport { APP_SETTING } from \"../../achievementsApp/config\";\n\n// RegExp rules\nimport { AddName, NoStartWhiteSpace } from \"../regexp-rules/RegExpRules\";\n\n// images for user guide in the dialog\nimport JupyterNotebookStep1 from \"../../assets/JupyterNotebookSampleActivityImg.png\";\nimport JupyterNotebookStep2 from \"../../assets/JupyterNotebookSolution.png\";\n\nconst DEFAULT_COUNT = 2;\nconst gameDefaultData = {\n  game: \"passenger-picker\",\n  scoreToWin: 10,\n  gameTime: 120,\n  unitsPerSide: 1,\n  levelsToWin: 1,\n  playMode: \"manual control\"\n};\n\nclass AddActivityDialog extends React.PureComponent {\n  static propTypes = {\n    activityExampleSolution: PropTypes.any,\n    onClose: PropTypes.func.isRequired,\n    onCommit: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    pathId: PropTypes.string.isRequired,\n    pathsInfo: PropTypes.any,\n    activity: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    uid: PropTypes.string.isRequired,\n    // temporary remove isRequired for fetchGithubFiles\n    fetchGithubFiles: PropTypes.func,\n    fetchGithubFilesStatus: PropTypes.string,\n    restrictedType: PropTypes.oneOf([...Object.keys(ACTIVITY_TYPES), false])\n  };\n\n  state = {\n    type: \"text\",\n    isCorrectInput: false\n  };\n\n  fetchedGithubURL = \"\";\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if ((nextProps.fetchGithubFilesStatus || \"\").length > 0) {\n      this.handelfetchGithubFilesStatus(\n        nextProps.fetchGithubFilesStatus,\n        nextProps.activity\n      );\n      return;\n    }\n    if ((this.props || {}).open !== nextProps.open) {\n      this.resetState();\n    }\n    if (nextProps.activity) {\n      let state = {};\n      if (\n        nextProps.activity.name &&\n        AddName.test(nextProps.activity.name) &&\n        NoStartWhiteSpace.test(nextProps.activity.name)\n      ) {\n        this.setState({ isCorrectInput: true });\n      }\n      if (\n        [ACTIVITY_TYPES.jupyterInline.id, ACTIVITY_TYPES.jupyter.id].includes(\n          nextProps.activity.type\n        )\n      ) {\n        state = {\n          code: nextProps.activity.code || 1,\n          frozen: nextProps.activity.frozen || 1\n        };\n      } else if (nextProps.activity.type === ACTIVITY_TYPES.jest.id) {\n        state = {\n          githubURL: nextProps.activity.githubURL || \"\",\n          files: nextProps.activity.files || []\n        };\n        this.fetchedGithubURL = nextProps.activity.githubURL || \"\";\n      }\n      this.setState({\n        ...nextProps.activity,\n        ...state\n      });\n    }\n  }\n\n  handelfetchGithubFilesStatus = (fetchGithubFilesStatus, activity) => {\n    switch (fetchGithubFilesStatus) {\n      case \"SUCCESS\":\n        this.fetchedGithubURL = this.state.githubURL;\n        this.setState({ files: activity.files || [] });\n        this.hideLoading();\n        break;\n      case \"LOADING\":\n        this.showLoading();\n        break;\n      case \"ERROR\":\n        this.hideLoading();\n        break;\n      default:\n        this.hideLoading();\n    }\n  };\n\n  getTypeSpecificElements() {\n    let { activity, activityExampleSolution, restrictedType } = this.props;\n    const type =\n      restrictedType ||\n      this.state.type ||\n      (activity && activity.type) ||\n      \"text\";\n    /* if (\n      [\"jupyter\", \"jupyterInline\"].includes(type) &&\n      !isLoaded(activityExampleSolution)\n    ) {\n      return \"\";\n    }*/\n    activity = Object.assign(activity || {}, this.state);\n    switch (type) {\n      case ACTIVITY_TYPES.text.id:\n        return (\n          <TextField\n            fullWidth\n            label=\"Question\"\n            margin=\"normal\"\n            onChange={e => {\n              this.onFieldChange(\"question\", e.target.value);\n            }}\n            value={activity.question || \"\"}\n          />\n        );\n      case ACTIVITY_TYPES.codeCombat.id:\n        return (\n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel htmlFor=\"select-multiple-levels\">Level</InputLabel>\n            <Select\n              input={<Input id=\"select-multiple-levels\" />}\n              margin=\"none\"\n              MenuProps={{\n                PaperProps: {\n                  style: {\n                    maxHeight: 224,\n                    width: 250\n                  }\n                }\n              }}\n              onChange={e => this.onFieldChange(\"level\", e.target.value)}\n              value={activity.level || \"\"}\n            >\n              {Object.keys(APP_SETTING.CodeCombatLevels).map(id => (\n                <MenuItem\n                  key={APP_SETTING.CodeCombatLevels[id].name}\n                  value={id}\n                >\n                  {APP_SETTING.CodeCombatLevels[id].name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n      case ACTIVITY_TYPES.codeCombatNumber.id:\n        return (\n          <TextField\n            defaultValue={activity && String(activity.count || \"1\")}\n            fullWidth\n            label=\"Levels amount\"\n            margin=\"normal\"\n            onChange={e => this.onFieldChange(\"count\", Number(e.target.value))}\n            type=\"number\"\n            value={activity.count}\n          />\n        );\n      case ACTIVITY_TYPES.jupyter.id:\n        return (\n          <Fragment>\n            <TextField\n              defaultValue={activity && activity.problemURL}\n              fullWidth\n              label=\"Problem Notebook URL\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"problemURL\", e.target.value)}\n            />\n            <TextField\n              defaultValue={(activityExampleSolution || {}).solutionURL || \"\"}\n              fullWidth\n              label=\"Solution Notebook URL\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"solutionURL\", e.target.value)}\n            />\n            <TextField\n              defaultValue={activity && String(activity.frozen || \"1\")}\n              fullWidth\n              label=\"Number of frozen cells\"\n              margin=\"dense\"\n              onChange={e =>\n                this.onFieldChange(\"frozen\", Number(e.target.value))\n              }\n              type=\"number\"\n            />\n          </Fragment>\n        );\n      case ACTIVITY_TYPES.jupyterInline.id:\n        return (\n          <Fragment>\n            <Typography gutterBottom variant=\"body2\">\n              Jupyter Notebook Activity\n            </Typography>\n            <Typography gutterBottom variant=\"body1\">\n              A type of activity that requires the students to submit the python\n              solution for a single code box in a Jupyter notebook. The solution\n              should ensure that any relevant assertions/testing in the notebook\n              pass.\n            </Typography>\n            <br />\n            <Typography gutterBottom variant=\"body2\">\n              Step 1: Get the Shareable Link from Google Colab ipynb\n            </Typography>\n            <img alt=\"JupyterNotebookStep1\" src={JupyterNotebookStep1} />\n            <a\n              href=\"https://colab.research.google.com/drive/1Rx_oOoslo2bbT7CY6nXmWuwzJXootjzA\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <Typography align=\"center\" gutterBottom variant=\"caption\">\n                Sample Google Colab ipynb Link\n              </Typography>\n            </a>\n            <TextField\n              defaultValue={activity && activity.problemURL}\n              fullWidth\n              helperText=\"Make sure the ipynb's Link Sharing is on\"\n              label=\"Google Colab ipynb URL for this Activity\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"problemURL\", e.target.value)}\n            />\n            <Typography gutterBottom style={{ marginTop: 30 }} variant=\"body2\">\n              Step 2: Get the Shareable Link of the Solution Notebook\n            </Typography>\n            <img alt=\"JupyterNotebookStep2\" src={JupyterNotebookStep2} />\n            <a\n              href=\"https://colab.research.google.com/drive/1k-Q9j1AGx3MmQ9xxATlXXggwKo5CGC7C\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <Typography align=\"center\" gutterBottom variant=\"caption\">\n                Sample Solution Google Colab ipynb Link\n              </Typography>\n            </a>\n            <TextField\n              defaultValue={(activityExampleSolution || {}).solutionURL || \"\"}\n              fullWidth\n              helperText=\"just a sample solution from you is ok\"\n              label=\"Another Google Colab ipynb URL for the Solution\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"solutionURL\", e.target.value)}\n            />\n            <Typography gutterBottom style={{ marginTop: 30 }} variant=\"body2\">\n              Step 3: Select code block for solution input\n            </Typography>\n            <TextField\n              defaultValue={activity && String(activity.code || \"1\")}\n              fullWidth\n              label=\"Index of Code Block Student Can Edit Solution (Index starts from 0)\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"code\", Number(e.target.value))}\n              type=\"number\"\n            />\n          </Fragment>\n        );\n      case ACTIVITY_TYPES.youtube.id:\n        return (\n          <Fragment>\n            <TextField\n              defaultValue={activity && activity.youtubeURL}\n              fullWidth\n              helperText=\"The URL should be a clean '?v=<id>', without time start or playlist info (for example, 'https://www.youtube.com/watch?v=ZK3O402wf1c')\"\n              label=\"YouTube URL\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"youtubeURL\", e.target.value)}\n            />\n            <FormControl\n              component=\"fieldset\"\n              required\n              style={{\n                marginTop: 24\n              }}\n            >\n              <FormLabel component=\"legend\">Follow Up Questions</FormLabel>\n              <FormHelperText>\n                Select one or more of the questions below\n              </FormHelperText>\n              <FormGroup>\n                {Object.keys(YOUTUBE_QUESTIONS).map(questionType => (\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={\n                          this.state[questionType] ||\n                          (this.state[questionType] === undefined &&\n                            activity[questionType])\n                        }\n                        color=\"primary\"\n                        onChange={e =>\n                          this.onFieldChange(questionType, e.target.checked)\n                        }\n                      />\n                    }\n                    key={questionType}\n                    label={YOUTUBE_QUESTIONS[questionType]}\n                  />\n                ))}\n                <TextField\n                  defaultValue={activity && activity.customText}\n                  disabled={\n                    this.state.questionCustom === undefined\n                      ? !(activity && activity.questionCustom)\n                      : !this.state.questionCustom\n                  }\n                  fullWidth\n                  label=\"Custom question\"\n                  onChange={e =>\n                    this.onFieldChange(\"customText\", e.target.value)\n                  }\n                />\n              </FormGroup>\n            </FormControl>\n          </Fragment>\n        );\n      case ACTIVITY_TYPES.game.id:\n        return (\n          <GameActivity\n            activity={activity}\n            onFieldChange={this.onFieldChange}\n          />\n        );\n      case ACTIVITY_TYPES.jest.id:\n        return (\n          <Fragment>\n            <FormControl style={{ width: \"100%\" }}>\n              <InputLabel htmlFor=\"githubURL\">Github URL</InputLabel>\n              <Input\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"Fetch files from github.\"\n                      onClick={this.handleGithubURLSubmit}\n                    >\n                      {this.state.loading ? (\n                        <CircularProgress size={25} />\n                      ) : (\n                        <CloudDownload />\n                      )}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                id=\"githubURL\"\n                onChange={e => this.onFieldChange(\"githubURL\", e.target.value)}\n                type=\"text\"\n                value={activity.githubURL || \"\"}\n              />\n            </FormControl>\n            {this.state.files && this.state.files.length > 0 && (\n              <Fragment>\n                <Typography\n                  gutterBottom\n                  style={{ margin: \"12px 0px\" }}\n                  variant=\"body2\"\n                >\n                  <CheckBoxIcon style={{ float: \"left\" }} />\n                  Check files to allow write access for users.\n                </Typography>\n                <Typography gutterBottom variant=\"body2\">\n                  {this.fetchedGithubURL && (\n                    <LinkIcon style={{ float: \"left\" }} />\n                  )}\n                  &nbsp;\n                  {this.fetchedGithubURL}\n                </Typography>\n                {this.state.files.map(\n                  file =>\n                    file.type === \"file\" && (\n                      <ListItem\n                        button\n                        dense\n                        key={file.path}\n                        role={undefined}\n                        style={{ padding: \"0px 25px\" }}\n                      >\n                        <Checkbox\n                          checked={!file.readOnly}\n                          disableRipple\n                          onChange={() => this.handleReadOnlyFiles(file.path)}\n                          tabIndex={-1}\n                        />\n                        <ListItemText primary={file.path} />\n                      </ListItem>\n                    )\n                )}\n              </Fragment>\n            )}\n          </Fragment>\n        );\n      case ACTIVITY_TYPES.gameTournament.id:\n        return (\n          <TournamentActivity\n            activity={activity}\n            onFieldChange={this.onFieldChange}\n          />\n        );\n      case ACTIVITY_TYPES.creator.id:\n      case ACTIVITY_TYPES.educator.id:\n        return (\n          <Fragment>\n            <TextField\n              fullWidth\n              label=\"Type of required activity\"\n              margin=\"dense\"\n              onChange={e => this.onFieldChange(\"targetType\", e.target.value)}\n              select\n              value={\n                this.state.targetType ||\n                (activity && activity.targetType) ||\n                \"text\"\n              }\n            >\n              {Object.keys(ACTIVITY_TYPES).map(key => (\n                <MenuItem key={key} value={key}>\n                  {ACTIVITY_TYPES[key].caption}\n                </MenuItem>\n              ))}\n            </TextField>\n            {activity.type === ACTIVITY_TYPES.educator.id && (\n              <TextField\n                fullWidth\n                label=\"Count of required solutions\"\n                margin=\"dense\"\n                onChange={e =>\n                  this.onFieldChange(\"count\", Number(e.target.value))\n                }\n                value={\n                  this.state.count ||\n                  ((activity && activity.count) || DEFAULT_COUNT)\n                }\n              />\n            )}\n          </Fragment>\n        );\n      default:\n        return;\n    }\n  }\n\n  showLoading = () => {\n    this.setState(() => ({ loading: true }));\n  };\n\n  hideLoading = () => {\n    this.setState(() => ({ loading: false }));\n  };\n\n  handleReadOnlyFiles = filePath => {\n    this.setState(() => ({\n      files: this.state.files.map(file =>\n        file.path === filePath ? { ...file, readOnly: !file.readOnly } : file\n      )\n    }));\n  };\n\n  handleGithubURLSubmit = () => {\n    if (this.state.loading) return;\n    this.fetchedGithubURL = \"\";\n    this.setState({ files: [] });\n    this.props.fetchGithubFiles(this.state.githubURL);\n  };\n\n  onPathChange = e =>\n    this.setState({\n      path: e.target.value\n    });\n\n  onFieldChange = (field, value) => {\n    const { activity } = this.props;\n    // when edit/update\n    if (activity && activity.id) {\n      this.setState({\n        isCorrectInput: true\n      });\n    }\n    let state = {};\n    if (\n      field === \"type\" &&\n      [ACTIVITY_TYPES.jupyterInline.id, ACTIVITY_TYPES.jupyter.id].includes(\n        value\n      )\n    ) {\n      state = {\n        code: 1,\n        frozen: 1\n      };\n    }\n    if (field === \"type\" && value === \"game\") {\n      state = { ...gameDefaultData };\n    }\n    if (field === \"level\" && this.state.type === ACTIVITY_TYPES.codeCombat.id) {\n      state = {\n        name: APP_SETTING.CodeCombatLevels[value].name,\n        isCorrectInput: true\n      };\n    }\n    // validate name input\n    if (field === \"name\") {\n      if (AddName.test(value) && NoStartWhiteSpace.test(value)) {\n        this.setState({\n          isCorrectInput: true\n        });\n      } else {\n        this.setState({\n          isCorrectInput: false\n        });\n      }\n    }\n    this.setState({ [field]: value, ...state });\n  };\n\n  // TODO: validate required inputs at client-side for\n  // other types of activities\n\n  onCommit = () => {\n    const activity = { ...this.props.activity };\n    if (this.state.type === ACTIVITY_TYPES.jest.id) {\n      const { type, name } = this.state;\n      this.props.onCommit(this.props.pathId || this.state.path, {\n        ...activity,\n        type,\n        name,\n        githubURL: this.fetchedGithubURL,\n        files: this.state.files,\n        version: 1\n      });\n    } else {\n      this.props.onCommit(\n        this.props.pathId || this.state.path,\n        Object.assign(activity || {}, this.state, {\n          type: this.state.type || (activity && activity.type) || \"text\"\n        })\n      );\n    }\n  };\n\n  onClose = () => {\n    this.resetState();\n    this.props.onClose();\n  };\n\n  resetState = () => {\n    // Clear state. Render will be invoked 1 time only\n    Object.keys(this.state).forEach(\n      key => this.setState({ [key]: undefined }) || true\n    );\n    this.setState({\n      type: this.props.restrictedType || \"text\",\n      isCorrectInput: false\n    });\n  };\n\n  render() {\n    const { activity, open, pathId, pathsInfo, restrictedType } = this.props;\n    return (\n      <Dialog fullWidth onClose={this.onClose} open={open}>\n        <DialogTitle>\n          {activity && activity.id ? \"Edit Activity\" : \"Add New Activity\"}\n        </DialogTitle>\n        <DialogContent\n          style={{\n            width: \"100%\"\n          }}\n        >\n          {!pathId && (\n            <TextField\n              fullWidth\n              label=\"Path\"\n              margin={\"dense\"}\n              onChange={this.onPathChange}\n              required\n              select\n              value={this.state.path || \"\"}\n            >\n              {pathsInfo.map(pathInfo => (\n                <MenuItem key={pathInfo.id} value={pathInfo.id}>\n                  {pathInfo.name}\n                </MenuItem>\n              ))}\n            </TextField>\n          )}\n          <TextField\n            autoFocus\n            error={!this.state.isCorrectInput}\n            fullWidth\n            helperText={\n              this.state.isCorrectInput\n                ? \"\"\n                : \"Name should not be empty or too long or have invalid characters\"\n            }\n            label=\"Name\"\n            margin=\"dense\"\n            onChange={e => this.onFieldChange(\"name\", e.target.value)}\n            required\n            value={this.state.name || \"\"}\n          />\n          <TextField\n            fullWidth\n            label=\"Type\"\n            margin=\"dense\"\n            onChange={e => this.onFieldChange(\"type\", e.target.value)}\n            readOnly={!!restrictedType}\n            select\n            value={\n              restrictedType ||\n              this.state.type ||\n              (activity && activity.type) ||\n              \"text\"\n            }\n          >\n            {Object.keys(ACTIVITY_TYPES).map(key => (\n              <MenuItem key={key} value={key}>\n                {ACTIVITY_TYPES[key].caption}\n              </MenuItem>\n            ))}\n          </TextField>\n          {this.getTypeSpecificElements()}\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"secondary\" onClick={this.onClose}>\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            disabled={\n              this.state.loading ||\n              !this.state.isCorrectInput ||\n              !this.state.type ||\n              (this.state.type === ACTIVITY_TYPES.jest.id &&\n                !(this.state.files && this.state.files.length > 0))\n            }\n            onClick={this.onCommit}\n            variant=\"contained\"\n          >\n            Commit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    activityExampleSolution: (state.firebase.data.activityExampleSolutions ||\n      {})[(ownProps.activity || {}).id]\n  };\n};\n\nexport default compose(\n  firebaseConnect(ownProps => {\n    if (\n      ![\"jupyter\", \"jupyterInline\"].includes((ownProps.activity || {}).type)\n    ) {\n      return false;\n    }\n    return [`/activityExampleSolutions/${ownProps.activity.id}`];\n  }),\n  connect(mapStateToProps)\n)(AddActivityDialog);\n",
			"file": "src/components/dialogs/AddActivityDialog.js",
			"file_size": 23538,
			"file_write_time": 131931012040690842,
			"settings":
			{
				"buffer_size": 23530,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"PacakgeCoin",
				"Package Control: Install Package"
			],
			[
				"Inst",
				"Install Package Control"
			],
			[
				"package control in",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"jspre",
				"JsPrettier: Format Code"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 150.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/brainenjii/Develop/node/nus/achievements"
	],
	"file_history":
	[
		"/home/brainenjii/Develop/node/nus/achievements/src/containers/Assignments/actions.js",
		"/home/brainenjii/Develop/node/nus/achievements/src/containers/Assignments/reducer.js",
		"/home/brainenjii/Develop/node/nus/achievements/.eslintrc",
		"/home/brainenjii/.config/sublime-text-3/Packages/Babel/Babel.sublime-settings",
		"/home/brainenjii/Develop/node/nus/achievements/.tern-project",
		"/home/brainenjii/.config/sublime-text-3/Packages/User/TernJS.sublime-settings",
		"/home/brainenjii/.config/sublime-text-3/Packages/User/Babel.sublime-settings",
		"/home/brainenjii/Develop/node/nus/achievements/src/components/dialogs/AddActivityDialog.js",
		"/home/brainenjii/Develop/node/nus/achievements/src/containers/Cohort/Cohort.js",
		"/home/brainenjii/.config/sublime-text-3/Packages/TypeScript/Preferences.sublime-settings",
		"/home/brainenjii/Develop/node/nus/achievements/src/containers/Cohort/actions.js",
		"/home/brainenjii/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/brainenjii/.config/sublime-text-3/Packages/TypeScript/TypeScriptReact.sublime-settings",
		"/home/brainenjii/.config/sublime-text-3/Packages/TypeScript/TypeScript.sublime-settings",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/diagrams/WorkflowDiagram.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/services/entities.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/DocPattern/actions.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/NotImplemented.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/node_modules/storm-react-diagrams/dist/@types/src/defaults/models/DefaultPortModel.d.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/isomorphic/models/Enumeration.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/ListEntities/ListEntities.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Feature/Feature.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/DocPattern/DocPattern.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/forms/ReqPatternForm.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/forms/DocPatternGridForm.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/lists/FeaturesList.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/fields/EntityPickerField.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/lists/DocPatternStructureList.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/icons/ReqPatternIcon.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/DocPattern/selectors.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/isomorphic/tools/getRelations.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/services/related.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/isomorphic/types/stores.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/dialogs/EntitySelectDialog.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/rows/FeatureItemRow.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/icons/EntityIcon.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/trees/CustomTree.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/rows/CustomTreeRow.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Dimension/Dimension.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/drawers/MainDrawer.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Workspace/Workspace.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Main/Main.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/services/tool.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/isomorphic/models/DocPattern.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Enumeration/Enumeration.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/index.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/package.json",
		"/home/brainenjii/Develop/node/sveboda/material/src/isomorphic/models/SuperManager.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/ComplexDimensionData/ComplexDimensionData.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/ComplexDimension/ComplexDimension.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/registerServiceWorker.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/services/db.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/components/dialogs/DocPatternPrintsDialog.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/ListEntities/sagas.ts",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/Enumeration/sagas.ts",
		"/home/brainenjii/Develop/node/sveboda/material/scripts/deploy.sh",
		"/home/brainenjii/.config/sublime-text-3/Packages/ESLint/Default (Linux).sublime-keymap",
		"/home/brainenjii/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/brainenjii/Develop/node/sveboda/material/app.ts",
		"/home/brainenjii/Develop/node/sveboda/material/tsconfig.json",
		"/home/brainenjii/Develop/node/sveboda/material/src/config/store.tsx",
		"/home/brainenjii/Develop/node/sveboda/material/build/dist/src/isomorphic/models/SuperManager.js",
		"/home/brainenjii/Develop/node/sveboda/material/src/services/db.js",
		"/home/brainenjii/.config/sublime-text-3/Packages/JsPrettier/JsPrettier.sublime-settings",
		"/home/brainenjii/.config/sublime-text-3/Packages/User/JsPrettier.sublime-settings",
		"/home/brainenjii/Develop/node/sveboda/material/src/containers/DocPattern/untitled.sublime-project"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"multipleQuestion",
			"pathsData",
			"participants",
			"selectCohort",
			"this.onSortClick",
			"onSortClick",
			"cohortSortChange",
			"h",
			"onRemoveCourseClick",
			"onSortChange",
			"onSortClick",
			"sort",
			"ui:",
			"COHORT_SORT_CHANGE",
			"ASSIGNMENTS_SORT_CHANGE",
			"SORT",
			"const",
			"participants",
			"progress",
			"paths",
			"rank",
			"paths",
			"pathData",
			"name",
			"rank",
			"asc",
			"direction",
			"sortState",
			"sort",
			"Commit"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"onSortClick"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/containers/Activity/Activity.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7807,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/components/activityViews/ActivityQuestion.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1030,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 91.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/services/paths.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31320,
						"regions":
						{
						},
						"selection":
						[
							[
								882,
								882
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 162.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/containers/Cohort/selectors.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1445,
						"regions":
						{
						},
						"selection":
						[
							[
								1410,
								1410
							]
						],
						"settings":
						{
							"SL.126.region_keys":
							[
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/containers/Cohort/sagas.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3391,
						"regions":
						{
						},
						"selection":
						[
							[
								752,
								752
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/services/cohorts.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9287,
						"regions":
						{
						},
						"selection":
						[
							[
								515,
								515
							]
						],
						"settings":
						{
							"SL.137.region_keys":
							[
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1204,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										1037,
										1049
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1040,
								1040
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/containers/Cohort/reducer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2041,
						"regions":
						{
						},
						"selection":
						[
							[
								1081,
								1081
							]
						],
						"settings":
						{
							"SL.124.region_keys":
							[
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 99.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 8,
					"file": "src/components/tables/CohortCoursesTable.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6652,
						"regions":
						{
						},
						"selection":
						[
							[
								4560,
								4560
							]
						],
						"settings":
						{
							"SL.115.region_keys":
							[
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1458.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/containers/Assignments/selectors.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16800,
						"regions":
						{
						},
						"selection":
						[
							[
								774,
								774
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/components/dialogs/AddActivityDialog.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23530,
						"regions":
						{
						},
						"selection":
						[
							[
								1884,
								1884
							]
						],
						"settings":
						{
							"SL.24.region_keys":
							[
							],
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 465.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 120.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 120.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "achievements.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"AddAct",
				"src/components/dialogs/AddActivityDialog.js"
			],
			[
				"servi/pat",
				"src/services/paths.js"
			],
			[
				"Assi/sele",
				"src/containers/Assignments/selectors.js"
			],
			[
				"Cohort",
				"src/containers/Cohort/Cohort.js"
			],
			[
				"EntiIc",
				"src/components/icons/EntityIcon.tsx"
			],
			[
				"Draw",
				"src/components/drawers/MainDrawer.tsx"
			],
			[
				"MainDra",
				"src/components/drawers/MainDrawer.tsx"
			],
			[
				"Workspace",
				"src/containers/Workspace/Workspace.tsx"
			],
			[
				"Main",
				"src/containers/Main/Main.tsx"
			],
			[
				"Compl",
				"src/containers/ComplexDimension/ComplexDimension.tsx"
			],
			[
				"ReqFo",
				"src/components/forms/ReqPatternForm.tsx"
			],
			[
				"ser/rela",
				"src/services/related.ts"
			],
			[
				"getRe",
				"src/isomorphic/tools/getRelations.ts"
			],
			[
				"SUperM",
				"src/isomorphic/models/SuperManager.ts"
			],
			[
				"Doc",
				"src/containers/DocPattern/DocPattern.tsx"
			],
			[
				"DOcP",
				"src/containers/DocPattern/DocPattern.tsx"
			],
			[
				"DocPa",
				"src/containers/DocPattern/DocPattern.tsx"
			],
			[
				"DocPatter",
				"src/isomorphic/models/DocPattern.ts"
			],
			[
				"DocPat",
				"src/containers/DocPattern/DocPattern.tsx"
			],
			[
				"ENtIco",
				"src/components/icons/EntityIcon.tsx"
			],
			[
				"Featur",
				"src/containers/Feature/Feature.tsx"
			],
			[
				"Worksp",
				"src/containers/Workspace/Workspace.tsx"
			],
			[
				"rela/saga",
				"src/containers/RelatedData/sagas.ts"
			],
			[
				"typ/sto",
				"src/isomorphic/types/stores.ts"
			],
			[
				"Feat",
				"src/containers/Feature/Feature.tsx"
			],
			[
				"pacak",
				"package.json"
			],
			[
				"Dime.tsx",
				"src/containers/Dimension/Dimension.tsx"
			],
			[
				"Dime.ts",
				"src/isomorphic/models/Dimension.ts"
			],
			[
				"src/dep",
				"scripts/deploy.sh"
			],
			[
				"Featu",
				"src/containers/Feature/Feature.tsx"
			],
			[
				"Dime",
				"src/containers/Dimension/Dimension.tsx"
			],
			[
				"CU",
				"src/components/trees/CustomTree.tsx"
			],
			[
				"Dim.tsx",
				"src/containers/Dimension/Dimension.tsx"
			],
			[
				"Dimen",
				"src/containers/Dimension/Dimension.tsx"
			],
			[
				"EntIco",
				"src/components/icons/EntityIcon.tsx"
			],
			[
				"Main.tsx",
				"src/containers/Main/Main.tsx"
			],
			[
				"Icon",
				"src/components/icons/EntityIcon.tsx"
			],
			[
				"ListE",
				"src/containers/ListEntities/ListEntities.tsx"
			],
			[
				"tsco",
				"tsconfig.json"
			],
			[
				"Cont/Enu",
				"src/containers/Enumeration/Enumeration.tsx"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sve",
				"~/Develop/node/sveboda/material/material.sublime-project"
			],
			[
				"",
				"~/Develop/node/sveboda/material/material.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 222.0,
		"last_filter": "IRelatio",
		"selected_items":
		[
			[
				"IRelatio",
				"IRelationsData"
			],
			[
				"IRelationsD",
				"IRelationsData"
			]
		],
		"width": 920.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 306.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
